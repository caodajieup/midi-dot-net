// Copyright (c) 2009, Tom Lokovic
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

using System;
using System.Collections.Generic;

namespace Midi
{
    /// <summary>
    /// Abstract base class for scales.
    /// </summary>
    public abstract class Scale
    {
        /// <summary>
        /// Protected constructor.
        /// </summary>
        /// <param name="name">The name of the scale.</param>
        /// <param name="tonic">The tonic of the scale.</param>
        protected Scale(string name, NoteFamily tonic)
        {
            this.name = name;
            this.tonic = tonic;
        }

        /// <summary>
        /// Returns the sequence of notes generated by this scale when moving from start to finish.
        /// </summary>
        /// <param name="start">The first note in the traversal.</param>
        /// <param name="finish">The last note in the traversal.</param>
        /// <returns>The sequence of notes.  The result always includes start and finish, and then
        /// includes whichever intervening notes are implied by scale when moving in that direction.
        /// </returns>
        /// <exception cref="ArgumentOutOfRangeException">start or finish is out-of-range.
        /// </exception>
        public virtual List<Note> Traverse(Note start, Note finish)
        {
            start.Validate();
            finish.Validate();
            List<Note> result = new List<Note>();
            if (finish > start)
            {
                for (Note n = start; n <= finish; ++n)
                {
                    if (n == start || n == finish || ContainsWhenAscending(n))
                        result.Add(n);
                }
            }
            else if (finish < start)
            {
                for (Note n = start; n >= finish; --n)
                {
                    if (n == start || n == finish || ContainsWhenDescending(n))
                        result.Add(n);
                }
            }
            else
            {
                result.Add(start);
            }
            return result;
        }

        /// <summary>
        /// Returns true if note would be in this scale when ascending through the note.
        /// </summary>
        /// <param name="note">The note</param>
        /// <returns>True if note is included when ascending.</returns>
        /// <exception cref="ArgumentOutOfRangeException">note is out-of-range.</exception>
        public abstract bool ContainsWhenAscending(Note note);

        /// <summary>
        /// Returns true if note would be in this scale when decending through the note.
        /// </summary>
        /// <param name="note">The note</param>
        /// <returns>True if note is included when decending.</returns>
        /// <exception cref="ArgumentOutOfRangeException">note is out-of-range.</exception>
        public abstract bool ContainsWhenDescending(Note note);

        /// <summary>
        /// The name of this scale.
        /// </summary>
        public string Name
        {
            get
            {
                return name;
            }
        }
        private string name;

        /// <summary>
        /// The tonic of the scale.
        /// </summary>
        public NoteFamily Tonic
        {
            get
            {
                return tonic;
            }
        }
        private NoteFamily tonic;
    }

    /// <summary>
    /// The chromatic scale.
    /// </summary>
    public class ChromaticScale : Scale
    {
        /// <summary>
        /// Constructor.  Tonic is irrelevant for this scale.
        /// </summary>
        public ChromaticScale(NoteFamily tonic) : base("Chromatic", tonic) { }

        /// <summary>
        /// Returns true if note would be in this scale when ascending through the note.
        /// </summary>
        /// <param name="note">The note</param>
        /// <returns>True if note is included when ascending.</returns>
        /// <exception cref="ArgumentOutOfRangeException">note is out-of-range.</exception>
        public override bool ContainsWhenAscending(Note note)
        {
            return true;
        }

        /// <summary>
        /// Returns true if note would be in this scale when decending through the note.
        /// </summary>
        /// <param name="note">The note</param>
        /// <returns>True if note is included when decending.</returns>
        /// <exception cref="ArgumentOutOfRangeException">note is out-of-range.</exception>
        public override bool ContainsWhenDescending(Note note)
        {
            return true;
        }
    }

    /// <summary>
    /// A major scale.
    /// </summary>
    public class MajorScale : Scale
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        public MajorScale(NoteFamily tonic) : base(tonic.Name() + " Major", tonic) { }

        /// <summary>
        /// For each value of semitones-above-tonic, whether or not the scale contains that note.
        /// </summary>
        private static bool[] contains =
            { true, false, true, false, true, true, false, true, false, true, false, true };

        /// <summary>
        /// Returns true if note would be in this scale when ascending through the note.
        /// </summary>
        /// <param name="note">The note</param>
        /// <returns>True if note is included when ascending.</returns>
        /// <exception cref="ArgumentOutOfRangeException">note is out-of-range.</exception>
        public override bool ContainsWhenAscending(Note note)
        {
            return contains[note.SemitonesAbove(Tonic)];
        }

        /// <summary>
        /// Returns true if note would be in this scale when decending through the note.
        /// </summary>
        /// <param name="note">The note</param>
        /// <returns>True if note is included when decending.</returns>
        /// <exception cref="ArgumentOutOfRangeException">note is out-of-range.</exception>
        public override bool ContainsWhenDescending(Note note)
        {
            return contains[note.SemitonesAbove(Tonic)];
        }
    }

    /// <summary>
    /// A natural minor scale.
    /// </summary>
    public class NaturalMinorScale : Scale
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        public NaturalMinorScale(NoteFamily tonic) :
            base(tonic.Name() + " Narural Minor", tonic) { }

        /// <summary>
        /// For each value of semitones-above-tonic, whether or not the scale contains that note.
        /// </summary>
        private static bool[] contains =
            { true, false, true, true, false, true, false, true, true, false, true, false };

        /// <summary>
        /// Returns true if note would be in this scale when ascending through the note.
        /// </summary>
        /// <param name="note">The note</param>
        /// <returns>True if note is included when ascending.</returns>
        /// <exception cref="ArgumentOutOfRangeException">note is out-of-range.</exception>
        public override bool ContainsWhenAscending(Note note)
        {
            return contains[note.SemitonesAbove(Tonic)];
        }

        /// <summary>
        /// Returns true if note would be in this scale when decending through the note.
        /// </summary>
        /// <param name="note">The note</param>
        /// <returns>True if note is included when decending.</returns>
        /// <exception cref="ArgumentOutOfRangeException">note is out-of-range.</exception>
        public override bool ContainsWhenDescending(Note note)
        {
            return contains[note.SemitonesAbove(Tonic)];
        }
    }

    /// <summary>
    /// A natural minor scale.
    /// </summary>
    public class HarmonicMinorScale : Scale
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        public HarmonicMinorScale(NoteFamily tonic) :
            base(tonic.Name() + " Narural Minor", tonic) { }

        /// <summary>
        /// For each value of semitones-above-tonic, whether or not the scale contains that note.
        /// </summary>
        private static bool[] contains =
            { true, false, true, true, false, true, false, true, true, false, false, true };

        /// <summary>
        /// Returns true if note would be in this scale when ascending through the note.
        /// </summary>
        /// <param name="note">The note</param>
        /// <returns>True if note is included when ascending.</returns>
        /// <exception cref="ArgumentOutOfRangeException">note is out-of-range.</exception>
        public override bool ContainsWhenAscending(Note note)
        {
            return contains[note.SemitonesAbove(Tonic)];
        }

        /// <summary>
        /// Returns true if note would be in this scale when decending through the note.
        /// </summary>
        /// <param name="note">The note</param>
        /// <returns>True if note is included when decending.</returns>
        /// <exception cref="ArgumentOutOfRangeException">note is out-of-range.</exception>
        public override bool ContainsWhenDescending(Note note)
        {
            return contains[note.SemitonesAbove(Tonic)];
        }
    }

    /// <summary>
    /// A malodic minor scale.
    /// </summary>
    public class MelodicMinorScale : Scale
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        public MelodicMinorScale(NoteFamily tonic) :
            base(tonic.Name() + " Narural Minor", tonic) { }

        /// <summary>
        /// For each value of semitones-above-tonic, whether or not the scale contains that note.
        /// </summary>
        private static bool[] containsAscending =
            { true, false, true, true, false, true, false, true, false, true, false, true };

        /// <summary>
        /// For each value of semitones-above-tonic, whether or not the scale contains that note.
        /// </summary>
        private static bool[] containsDescending =
            { true, false, true, true, false, true, false, true, true, false, true, false };

        /// <summary>
        /// Returns true if note would be in this scale when ascending through the note.
        /// </summary>
        /// <param name="note">The note</param>
        /// <returns>True if note is included when ascending.</returns>
        /// <exception cref="ArgumentOutOfRangeException">note is out-of-range.</exception>
        public override bool ContainsWhenAscending(Note note)
        {
            return containsAscending[note.SemitonesAbove(Tonic)];
        }

        /// <summary>
        /// Returns true if note would be in this scale when decending through the note.
        /// </summary>
        /// <param name="note">The note</param>
        /// <returns>True if note is included when decending.</returns>
        /// <exception cref="ArgumentOutOfRangeException">note is out-of-range.</exception>
        public override bool ContainsWhenDescending(Note note)
        {
            return containsDescending[note.SemitonesAbove(Tonic)];
        }
    }

}
